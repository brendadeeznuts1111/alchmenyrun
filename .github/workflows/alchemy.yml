name: Alchemy

on:
  push:
    branches: [main]
  pull_request:

env:
  ALCHEMY_PROFILE: ci        # Use ci profile as documented - implements alchemy.run/guides/ci patterns
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  # Enable debug logging
  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG || 'false' }}
  ACTIONS_RUNNER_DEBUG: ${{ secrets.ACTIONS_RUNNER_DEBUG || 'false' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install
        run: bun install --frozen-lockfile

      - name: Setup CI Profile
        run: |
          mkdir -p ~/.alchemy/credentials/ci
          cat > ~/.alchemy/config.json << 'EOF'
          {
            "version": 1,
            "profiles": {
              "ci": {
                "cloudflare": {
                  "method": "api-token",
                  "metadata": {
                    "id": "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}",
                    "name": "CI Account"
                  }
                }
              }
            }
          }
          EOF
          cat > ~/.alchemy/credentials/ci/cloudflare.json << 'EOF'
          {
            "type": "api-token",
            "token": "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          }
          EOF

      - name: Compute stage
        id: stage
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "name=prod" >> $GITHUB_OUTPUT
          else
            echo "name=personal" >> $GITHUB_OUTPUT
          fi

      - name: Build CSS
        run: bun run build:css

      - name: Debug Environment
        run: |
          echo "=== Debug Environment Variables ==="
          echo "Stage: ${{ steps.stage.outputs.name }}"
          echo "ALCHEMY_PROFILE: $ALCHEMY_PROFILE"
          echo "CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID:+***}"
          echo "CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:+***}"
          echo "CLOUDFLARE_ZONE_ID: ${CLOUDFLARE_ZONE_ID:-<not set>}"
          echo "ACTIONS_STEP_DEBUG: $ACTIONS_STEP_DEBUG"
          echo "ACTIONS_RUNNER_DEBUG: $ACTIONS_RUNNER_DEBUG"
          echo "====================================="

      - name: Deploy
        run: bun ./alchemy.run.ts --stage ${{ steps.stage.outputs.name }} --adopt
        env:
          ALCHEMY_PASSWORD: ${{ secrets.ALCHEMY_PASSWORD }}
          ALCHEMY_STATE_TOKEN: ${{ secrets.ALCHEMY_STATE_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          API_KEY: ${{ secrets.API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MCP_SHARED_SECRET: ${{ secrets.MCP_SHARED_SECRET }}
          MCP_JWT_SECRET: ${{ secrets.MCP_JWT_SECRET }}
          # Debug environment variables
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID || '' }}
          ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG || 'false' }}
          ACTIONS_RUNNER_DEBUG: ${{ secrets.ACTIONS_RUNNER_DEBUG || 'false' }}

      - name: Health check (prod only)
        if: steps.stage.outputs.name == 'prod'
        run: |
          if [[ -n "${PROD_URL:-}" ]]; then
            curl -f "$PROD_URL/api/health" || echo "Health check failed"
          else
            echo "Skipping health check - PROD_URL not configured"
          fi
        env:
          PROD_URL: ${{ secrets.PROD_URL }}

