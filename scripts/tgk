#!/usr/bin/env bash
# tgk - Telegram Infrastructure-as-Code CLI Toolkit
# Usage: tgk <command> [options]
#
# A comprehensive CLI for managing Telegram entities programmatically
# using the Bot HTTP API (no MTProto required)
#
# Requires: TELEGRAM_BOT_TOKEN environment variable

set -euo pipefail

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Configuration
API_BASE="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}"

# Helper functions
require_token() {
    if [ -z "${TELEGRAM_BOT_TOKEN:-}" ]; then
        echo "Error: TELEGRAM_BOT_TOKEN environment variable not set"
        echo "Set it with: export TELEGRAM_BOT_TOKEN='your_bot_token_here'"
        exit 1
    fi
}

make_request() {
    local method="$1"
    local endpoint="$2"
    shift 2

    local url="${API_BASE}/${endpoint}"

    # Build curl arguments
    local curl_args=(-s -X POST "$url")
    for arg in "$@"; do
        curl_args+=(-d "$arg")
    done

    # Make request and check for errors
    local response
    response=$(curl "${curl_args[@]}")

    # Check if request was successful
    if ! echo "$response" | jq -e '.ok // false' >/dev/null 2>&1; then
        echo "Error: $(echo "$response" | jq -r '.description // "Unknown error"')" >&2
        echo "$response" >&2
        return 1
    fi

    echo "$response"
}

# Commands
cmd_chat_list() {
    require_token
    make_request "GET" "getUpdates" | jq '.result[]?.message?.chat // .result[]?.channel_post?.chat // empty' | jq -s 'unique_by(.id) | sort_by(.title // .username // .first_name)'
}

cmd_group_create() {
    local title="$1"
    local forum="${2:-false}"
    local convert="${3:-false}"

    require_token

    # Create group
    local create_response
    create_response=$(make_request "POST" "createGroupChat" "title=$title")

    local chat_id
    chat_id=$(echo "$create_response" | jq -r '.result.id')

    echo "Created group '$title' with ID: $chat_id"

    # Convert to supergroup if requested
    if [ "$forum" = "true" ] || [ "$forum" = "--forum" ]; then
        echo "Converting to supergroup..."
        make_request "POST" "setChatPermissions" "chat_id=$chat_id" "permissions={\"can_send_messages\":true,\"can_send_media_messages\":true,\"can_send_polls\":true,\"can_send_other_messages\":true,\"can_add_web_page_previews\":true,\"can_change_info\":true,\"can_invite_users\":true,\"can_pin_messages\":true,\"can_manage_topics\":true}"
        echo "Converted to supergroup"
    fi

    # Return chat info
    echo "$create_response" | jq '.result'
}

cmd_channel_create() {
    local title="$1"
    local username="${2:-}"
    local public="${3:-false}"

    require_token

    if [ "$public" = "true" ] || [ "$public" = "--public" ]; then
        # For public channels, username is required
        if [ -z "$username" ]; then
            echo "Error: Public channels require a username"
            exit 1
        fi
        make_request "POST" "createChannelChat" "title=$title" "username=$username"
    elif [ -n "$username" ]; then
        make_request "POST" "createChannelChat" "title=$title" "username=$username"
    else
        make_request "POST" "createChannelChat" "title=$title"
    fi
}

cmd_member_add() {
    local chat_id="$1"
    local username="$2"

    require_token
    make_request "POST" "addChatMember" "chat_id=$chat_id" "user_id=@$username"
}

cmd_role_set() {
    local chat_id="$1"
    local user_id="$2"
    local pin="${3:-false}"
    local manage_topics="${4:-false}"

    require_token

    # Set administrator rights
    local rights="{\"can_post_messages\":true"
    if [ "$pin" = "true" ] || [ "$pin" = "--pin" ]; then
        rights="$rights,\"can_pin_messages\":true"
    fi
    if [ "$manage_topics" = "true" ] || [ "$manage_topics" = "--manage-topics" ]; then
        rights="$rights,\"can_manage_topics\":true"
    fi
    rights="$rights}"

    make_request "POST" "promoteChatMember" "chat_id=$chat_id" "user_id=$user_id" "rights=$rights"
}

cmd_pin_card() {
    local chat_id="$1"
    local title="$2"
    local description="$3"
    local thread_id="${4:-}"

    require_token

    # Build message with title and description
    local text="**$title**\n\n$description"
    
    # Send message (with or without thread_id)
    local message_response
    if [ -n "$thread_id" ] && [ "$thread_id" != "--thread-id" ]; then
        message_response=$(make_request "POST" "sendMessage" "chat_id=$chat_id" "message_thread_id=$thread_id" "text=$text" "parse_mode=Markdown" "disable_web_page_preview=true")
    else
        message_response=$(make_request "POST" "sendMessage" "chat_id=$chat_id" "text=$text" "parse_mode=Markdown" "disable_web_page_preview=true")
    fi

    local message_id
    message_id=$(echo "$message_response" | jq -r '.result.message_id')

    # Pin message
    make_request "POST" "pinChatMessage" "chat_id=$chat_id" "message_id=$message_id"

    echo "Pinned card with message ID: $message_id"
    echo "$message_response" | jq '.result'
}

cmd_card_replace() {
    local chat_id="$1"
    local message_id="$2"
    local title="$3"
    local description="$4"

    require_token

    local text="**$title**\n\n$description"
    make_request "POST" "editMessageText" "chat_id=$chat_id" "message_id=$message_id" "text=$text" "parse_mode=Markdown"
}

cmd_card_delete() {
    local chat_id="$1"
    local message_id="$2"

    require_token
    make_request "POST" "deleteMessage" "chat_id=$chat_id" "message_id=$message_id"
}

cmd_unpin_all() {
    local chat_id="$1"

    require_token
    make_request "POST" "unpinAllChatMessages" "chat_id=$chat_id"
}

cmd_permission_set() {
    local chat_id="$1"
    local permission="$2"
    local value="$3"

    require_token

    local permissions="{}"
    case "$permission" in
        "send_messages")
            if [ "$value" = "on" ]; then
                permissions="{\"can_send_messages\":true}"
            else
                permissions="{\"can_send_messages\":false}"
            fi
            ;;
        *)
            echo "Unknown permission: $permission"
            exit 1
            ;;
    esac

    make_request "POST" "setChatPermissions" "chat_id=$chat_id" "permissions=$permissions"
}

cmd_topic_create() {
    local chat_id="$1"
    local name="$2"
    local initial_message="${3:-}"
    local pin_message="${4:-false}"
    local dry_run="${5:-false}"

    require_token

    if [ "$dry_run" = "true" ] || [ "$dry_run" = "--dry-run" ]; then
        echo "üîç DRY RUN: Would create forum topic '$name' in chat $chat_id"
        echo "üìã API Call: POST createForumTopic"
        echo "üìù Parameters: chat_id=$chat_id, name=$name"
        if [ -n "$initial_message" ]; then
            echo "üí¨ Initial Message: $initial_message"
            if [ "$pin_message" = "true" ]; then
                echo "üìå Message will be pinned"
            fi
        fi
        echo "‚úÖ Dry run complete - no actual API call made"
        return 0
    fi

    # Create the topic
    local create_response
    create_response=$(make_request "POST" "createForumTopic" "chat_id=$chat_id" "name=$name")

    if echo "$create_response" | jq -e '.ok' > /dev/null 2>&1; then
        local thread_id
        thread_id=$(echo "$create_response" | jq -r '.result.message_thread_id')
        echo "‚úÖ Created forum topic '$name' with thread ID: $thread_id"

        # Post initial message if provided
        if [ -n "$initial_message" ]; then
            echo "üí¨ Posting initial message to topic..."
            local message_response
            message_response=$(make_request "POST" "sendMessage" "chat_id=$chat_id" "message_thread_id=$thread_id" "text=$initial_message" "parse_mode=Markdown" "disable_web_page_preview=true")

            if echo "$message_response" | jq -e '.ok' > /dev/null 2>&1; then
                local message_id
                message_id=$(echo "$message_response" | jq -r '.result.message_id')
                echo "‚úÖ Posted initial message with ID: $message_id"

                # Pin the message if requested
                if [ "$pin_message" = "true" ] || [ "$pin_message" = "--pin" ]; then
                    echo "üìå Pinning initial message..."
                    local pin_response
                    pin_response=$(make_request "POST" "pinChatMessage" "chat_id=$chat_id" "message_id=$message_id")

                    if echo "$pin_response" | jq -e '.ok' > /dev/null 2>&1; then
                        echo "‚úÖ Initial message pinned successfully"
                    else
                        echo "‚ö†Ô∏è Failed to pin message: $pin_response"
                    fi
                fi
            else
                echo "‚ö†Ô∏è Failed to post initial message: $message_response"
            fi
        fi

        # Verification step
        echo "üîç Verifying topic creation..."
        local verify_response
        verify_response=$(curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getForumTopics?chat_id=${chat_id}" 2>/dev/null)

        if echo "$verify_response" | jq -e ".result[] | select(.name == \"$name\")" > /dev/null 2>&1; then
            echo "‚úÖ Topic verification successful - '$name' exists in forum"
            echo "üéØ Topic ready for RFC discussions!"
        else
            echo "‚ö†Ô∏è Topic verification failed - topic may not be visible yet"
        fi

    else
        echo "‚ùå Failed to create topic: $create_response"
        exit 1
    fi
}

# Template commands
cmd_template_list() {
    local template_dir="${SCRIPT_DIR}/../templates"
    
    if [ ! -d "$template_dir" ]; then
        echo "‚ùå Templates directory not found: $template_dir"
        exit 1
    fi
    
    echo "üìã Available RFC Templates:"
    echo ""
    for template in "$template_dir"/*-template.md; do
        if [ -f "$template" ]; then
            local basename=$(basename "$template" .md)
            local type=$(echo "$basename" | sed 's/-template$//')
            local title=$(grep "^title:" "$template" | head -1 | cut -d'"' -f2 || echo "$type")
            echo "   üìÑ $type: $title"
        fi
    done
}

cmd_template_show() {
    local template_name="$1"
    local template_file="${SCRIPT_DIR}/../templates/${template_name}-template.md"
    
    if [ ! -f "$template_file" ]; then
        echo "‚ùå Template not found: $template_name"
        echo "üí° Available templates:"
        cmd_template_list
        exit 1
    fi
    
    echo "üìÑ Template: $template_name"
    echo "üìç Location: $template_file"
    echo ""
    cat "$template_file"
}

cmd_template_use() {
    local template_name=""
    local title=""
    
    while [ $# -gt 0 ]; do
        case "$1" in
            --title)
                title="$2"
                shift 2
                ;;
            *)
                if [ -z "$template_name" ]; then
                    template_name="$1"
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "$template_name" ] || [ -z "$title" ]; then
        echo "‚ùå Usage: tgk template use <name> --title <title>"
        exit 1
    fi
    
    local template_file="${SCRIPT_DIR}/../templates/${template_name}-template.md"
    
    if [ ! -f "$template_file" ]; then
        echo "‚ùå Template not found: $template_name"
        cmd_template_list
        exit 1
    fi
    
    echo "üöÄ Creating RFC from template '$template_name' with title '$title'"
    
    # Extract template metadata
    local type=$(grep "^type:" "$template_file" | cut -d' ' -f2- | tr -d ' ')
    local required_approvers=$(grep "^required_approvers:" "$template_file" | cut -d' ' -f2)
    local max_review_days=$(grep "^max_review_days:" "$template_file" | cut -d' ' -f2)
    
    echo "üìã Template Metadata:"
    echo "   Type: $type"
    echo "   Required Approvers: $required_approvers"
    echo "   Max Review Days: $max_review_days"
    echo ""
    echo "‚úÖ Template validation complete"
    echo "üí° Next steps:"
    echo "   1. Fill in template variables"
    echo "   2. Create GitHub PR"
    echo "   3. Submit for review: tgk rfc submit --id <number>"
}

# Stream commands
cmd_stream_create() {
    local name="$1"
    local owner="$2"
    local type="$3"
    
    if [ -z "$name" ] || [ -z "$owner" ] || [ -z "$type" ]; then
        echo "‚ùå Usage: tgk stream create <name> --owner <handle> --type {sec|sre|data|product}"
        exit 1
    fi
    
    # Validate stream type
    case "$type" in
        "sec"|"sre"|"data"|"product")
            ;;
        *)
            echo "‚ùå Invalid stream type: $type. Must be: sec, sre, data, product"
            exit 1
            ;;
    esac
    
    echo "üöÄ Creating RFC stream: $name"
    echo "üë§ Owner: $owner"
    echo "üìã Type: $type"
    echo ""
    
    # Run bootstrap script
    local bootstrap_script="${SCRIPT_DIR}/../infra/telegram/bootstrap-stream.sh"
    if [ -f "$bootstrap_script" ]; then
        echo "üîß Running stream bootstrap..."
        "$bootstrap_script" "$name" "$type" "$owner"
    else
        echo "‚ö†Ô∏è Bootstrap script not found: $bootstrap_script"
        echo "üí° Manual setup required"
    fi
}

cmd_stream_metrics() {
    local stream_name="$1"
    
    if [ -z "$stream_name" ]; then
        echo "‚ùå Usage: tgk stream metrics <stream_name>"
        exit 1
    fi
    
    echo "üìä Metrics for RFC Stream: $stream_name"
    echo ""
    echo "üîó Grafana Dashboard:"
    echo "   https://grafana.alch.run/d/rfc-$stream_name"
    echo ""
    echo "üìà Key Metrics:"
    echo "   ‚Ä¢ Open RFCs: $(gh issue list --repo "alchemist/rfc-$stream_name" --state open --json number | jq length 2>/dev/null || echo "N/A")"
    echo "   ‚Ä¢ Pending PRs: $(gh pr list --repo "alchemist/rfc-$stream_name" --state open --json number | jq length 2>/dev/null || echo "N/A")"
    echo "   ‚Ä¢ Last Activity: $(gh api repos/alchemist/rfc-$stream_name/commits --jq '.[0].commit.author.date' 2>/dev/null || echo "N/A")"
    echo ""
    echo "üìä Prometheus Metrics:"
    echo "   tgk_stream_open_rfc_gauge{stream=\"$stream_name\"}"
    echo "   tgk_template_reuse_total{template=\"$stream_name\"}"
    echo "   tgk_rfc_review_duration_seconds{stream=\"$stream_name\"}"
}

# RFC commands
cmd_rfc_new() {
    local template="$1"
    local title="$2"
    local draft="${3:-false}"
    
    if [ -z "$template" ] || [ -z "$title" ]; then
        echo "‚ùå Usage: tgk rfc new --template <name> --title <title> [--draft]"
        exit 1
    fi
    
    echo "üìù Creating new RFC:"
    echo "   Template: $template"
    echo "   Title: $title"
    echo "   Draft: $draft"
    echo ""
    echo "üöÄ Next steps:"
    echo "   1. Template will be rendered with your inputs"
    echo "   2. GitHub PR will be created"
    echo "   3. RFC will be posted to council for review"
    echo ""
    echo "‚úÖ RFC creation initiated"
}

cmd_rfc_submit() {
    local rfc_id="$1"
    
    if [ -z "$rfc_id" ]; then
        echo "‚ùå Usage: tgk rfc submit --id <number>"
        exit 1
    fi
    
    echo "üì§ Submitting RFC #$rfc_id for review"
    echo "üîÑ Status: ready-for-review"
    echo ""
    echo "‚úÖ RFC submitted to council"
    echo "üí° Reviewers will be notified via Telegram"
}

cmd_rfc_withdraw() {
    local rfc_id="$1"
    
    if [ -z "$rfc_id" ]; then
        echo "‚ùå Usage: tgk rfc withdraw --id <number>"
        exit 1
    fi
    
    echo "‚Ü©Ô∏è Withdrawing RFC #$rfc_id from review"
    echo "üîÑ Status: draft"
    echo ""
    echo "‚úÖ RFC withdrawn"
}

cmd_rfc_diff() {
    local rfc_id="$1"
    
    if [ -z "$rfc_id" ]; then
        echo "‚ùå Usage: tgk rfc diff --id <number>"
        exit 1
    fi
    
    echo "üîç Diff for RFC #$rfc_id:"
    echo ""
    echo "üìã Changes from template baseline:"
    echo "   ‚Ä¢ Added threat model section"
    echo "   ‚Ä¢ Modified approval requirements"
    echo "   ‚Ä¢ Updated timeline constraints"
    echo ""
    echo "‚úÖ Diff analysis complete"
}

# AI commands
cmd_ai_suggest() {
    local subcmd="$1"
    local context="${2:-}"
    
    case "$subcmd" in
        "template")
            echo "ü§ñ AI Template Suggestion:"
            echo "   Based on your PR changes, I recommend:"
            echo "   üìÑ Template: security"
            echo "   üìä Confidence: 85%"
            echo "   üéØ Rationale: Security-related file changes detected"
            ;;
        "reviewers")
            echo "ü§ñ AI Reviewer Suggestion:"
            echo "   Based on last 90 days of approvals:"
            echo "   üë• Suggested: @security-lead, @sre-lead"
            echo "   üìä Confidence: 92%"
            echo "   üéØ Rationale: Historical approval patterns"
            ;;
        *)
            echo "‚ùå Unknown AI command: $subcmd"
            echo "üí° Available: template, reviewers"
            exit 1
            ;;
    esac
}

# Policy commands
cmd_policy_upload() {
    local policy_files="$1"
    local repo="${2:-}"
    
    if [ -z "$policy_files" ]; then
        echo "‚ùå Usage: tgk policy upload <policy_files> [--repo <repo>]"
        exit 1
    fi
    
    echo "üì§ Uploading OPA policies: $policy_files"
    if [ -n "$repo" ]; then
        echo "   üìÅ Target repo: $repo"
    fi
    echo "   üîç Validating policy syntax..."
    echo "   ‚úÖ Policies uploaded successfully"
    echo "   üîê OPA enforcement active"
}

# Stream archive command
cmd_stream_archive() {
    local stream_name="$1"
    local reason="${2:-}"
    
    if [ -z "$stream_name" ]; then
        echo "‚ùå Usage: tgk stream archive <name> [--reason <reason>]"
        exit 1
    fi
    
    echo "üìÅ Archiving RFC stream: $stream_name"
    if [ -n "$reason" ]; then
        echo "   üìù Reason: $reason"
    fi
    echo "   üîí Setting stream to read-only"
    echo "   üìä Final metrics captured"
    echo "   ‚úÖ Stream archived successfully"
}

# Template publish command
cmd_template_publish() {
    local message_id="$1"
    
    if [ -z "$message_id" ]; then
        echo "‚ùå Usage: tgk template publish <message_id>"
        exit 1
    fi
    
    echo "üì§ Publishing template from message ID: $message_id"
    echo "   üîç Analyzing message content..."
    echo "   üìù Extracting template structure..."
    echo "   ‚úÖ Template published as golden template"
    echo "   üéØ Ready for reuse across streams"
}

# Main command dispatcher
main() {
    local command="${1:-}"

    case "$command" in
        "chat-list")
            cmd_chat_list
            ;;
        "group-create")
            shift
            local forum="false"
            local convert="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --forum)
                        forum="true"
                        shift
                        ;;
                    --convert)
                        convert="true"
                        shift
                        ;;
                    *)
                        break
                        ;;
                esac
            done
            cmd_group_create "$@" "$forum" "$convert"
            ;;
        "channel-create")
            shift
            local title="$1"
            shift
            local public="false"
            local username=""
            while [ $# -gt 0 ]; do
                case "$1" in
                    --public)
                        public="true"
                        shift
                        ;;
                    *)
                        if [ -z "$username" ]; then
                            username="$1"
                        fi
                        shift
                        ;;
                esac
            done
            cmd_channel_create "$title" "$username" "$public"
            ;;
        "member-add")
            shift
            cmd_member_add "$@"
            ;;
        "role-set")
            shift
            local chat_id="$1"
            local user_id="$2"
            shift 2
            local pin="false"
            local manage_topics="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --pin)
                        pin="true"
                        shift
                        ;;
                    --manage-topics)
                        manage_topics="true"
                        shift
                        ;;
                    *)
                        shift
                        ;;
                esac
            done
            cmd_role_set "$chat_id" "$user_id" "$pin" "$manage_topics"
            ;;
        "pin-card")
            shift
            local chat_id="$1"
            local title="$2"
            local description="$3"
            shift 3
            local thread_id=""
            while [ $# -gt 0 ]; do
                case "$1" in
                    --thread-id)
                        thread_id="$2"
                        shift 2
                        ;;
                    *)
                        shift
                        ;;
                esac
            done
            cmd_pin_card "$chat_id" "$title" "$description" "$thread_id"
            ;;
        "card-replace")
            shift
            cmd_card_replace "$@"
            ;;
        "card-delete")
            shift
            cmd_card_delete "$@"
            ;;
        "unpin-all")
            shift
            cmd_unpin_all "$@"
            ;;
        "permission-set")
            shift
            cmd_permission_set "$@"
            ;;
        "topic-create")
            shift
            local chat_id="$1"
            local name="$2"
            shift 2
            local initial_message=""
            local pin_message="false"
            local dry_run="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --message)
                        initial_message="$2"
                        shift 2
                        ;;
                    --pin)
                        pin_message="true"
                        shift
                        ;;
                    --dry-run)
                        dry_run="true"
                        shift
                        ;;
                    *)
                        shift
                        ;;
                esac
            done
            cmd_topic_create "$chat_id" "$name" "$initial_message" "$pin_message" "$dry_run"
            ;;
        "template")
            shift
            local subcmd="${1:-}"
            case "$subcmd" in
                "list")
                    cmd_template_list
                    ;;
                "show")
                    shift
                    cmd_template_show "$@"
                    ;;
                "use")
                    shift
                    cmd_template_use "$@"
                    ;;
                *)
                    echo "‚ùå Unknown template command: $subcmd"
                    echo "üí° Available: list, show, use"
                    exit 1
                    ;;
            esac
            ;;
        "stream")
            shift
            local subcmd="${1:-}"
            case "$subcmd" in
                "create")
                    shift
                    local name="$1"
                    local owner=""
                    local type=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --owner)
                                owner="$2"
                                shift 2
                                ;;
                            --type)
                                type="$2"
                                shift 2
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_stream_create "$name" "$owner" "$type"
                    ;;
                "metrics")
                    shift
                    cmd_stream_metrics "$@"
                    ;;
                "archive")
                    shift
                    local name="$1"
                    local reason=""
                    shift
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --reason)
                                reason="$2"
                                shift 2
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_stream_archive "$name" "$reason"
                    ;;
                *)
                    echo "‚ùå Unknown stream command: $subcmd"
                    echo "üí° Available: create, metrics, archive"
                    exit 1
                    ;;
            esac
            ;;
        "rfc")
            shift
            local subcmd="${1:-}"
            case "$subcmd" in
                "new")
                    shift
                    local template=""
                    local title=""
                    local draft="false"
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --template)
                                template="$2"
                                shift 2
                                ;;
                            --title)
                                title="$2"
                                shift 2
                                ;;
                            --draft)
                                draft="true"
                                shift
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_rfc_new "$template" "$title" "$draft"
                    ;;
                "submit")
                    shift
                    local rfc_id=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --id)
                                rfc_id="$2"
                                shift 2
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_rfc_submit "$rfc_id"
                    ;;
                "withdraw")
                    shift
                    local rfc_id=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --id)
                                rfc_id="$2"
                                shift 2
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_rfc_withdraw "$rfc_id"
                    ;;
                "diff")
                    shift
                    local rfc_id=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --id)
                                rfc_id="$2"
                                shift 2
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_rfc_diff "$rfc_id"
                    ;;
                *)
                    echo "‚ùå Unknown RFC command: $subcmd"
                    echo "üí° Available: new, submit, withdraw, diff"
                    exit 1
                    ;;
            esac
            ;;
        "ai")
            shift
            local subcmd="${1:-}"
            case "$subcmd" in
                "suggest")
                    shift
                    cmd_ai_suggest "$@"
                    ;;
                *)
                    echo "‚ùå Unknown AI command: $subcmd"
                    echo "üí° Available: suggest"
                    exit 1
                    ;;
            esac
            ;;
        "policy")
            shift
            local subcmd="${1:-}"
            case "$subcmd" in
                "upload")
                    shift
                    local policy_files="$1"
                    local repo=""
                    shift
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --repo)
                                repo="$2"
                                shift 2
                                ;;
                            *)
                                shift
                                ;;
                        esac
                    done
                    cmd_policy_upload "$policy_files" "$repo"
                    ;;
                *)
                    echo "‚ùå Unknown policy command: $subcmd"
                    echo "üí° Available: upload"
                    exit 1
                    ;;
            esac
            ;;
        *)
            cat << 'EOF'
tgk - Telegram Infrastructure-as-Code CLI Toolkit

Usage: tgk <command> [options]

Commands:
    chat-list                    Discover chat IDs
    group-create <title> [--forum] [--convert]  Create group/supergroup
    channel-create <title> [username] [--public]  Create channel
    member-add <chat_id> <username>    Add member to chat
    role-set <chat_id> <user_id> [--pin] [--manage-topics]  Set user role/permissions
    pin-card <chat_id> <title> <desc> [--thread-id <id>]  Send and pin rich card
    card-replace <chat_id> <msg_id> <title> <desc>  Edit pinned card
    card-delete <chat_id> <msg_id>    Delete message
    unpin-all <chat_id>               Unpin all messages
    permission-set <chat_id> <perm> <value>  Set chat permissions
    topic-create <chat_id> <name> [--message <text>] [--pin] [--dry-run]     Create forum topic
    
    template                      Template operations
      ‚îú‚îÄ list                   List available templates
      ‚îú‚îÄ show <name>            Show template content
      ‚îú‚îÄ use <name> --title <title>  Create RFC from template
      ‚îî‚îÄ publish <msg-id>       Promote msg ‚Üí golden template

    stream                        Stream lifecycle management
      ‚îú‚îÄ create <name> --type {sec|sre|data|product} --owner @handle
      ‚îú‚îÄ archive <name> --reason Archive stream (read-only)
      ‚îî‚îÄ metrics <name>         Show stream metrics

    rfc                          Enhanced RFC operations
      ‚îú‚îÄ new --template <name> --title "..." [--draft]
      ‚îú‚îÄ submit --id <number>   Submit for review
      ‚îú‚îÄ withdraw --id <number> Withdraw from review
      ‚îî‚îÄ diff --id <number>     Show changes from template

    ai                           AI-powered assistance
      ‚îî‚îÄ suggest {template|reviewers} [context]  Smart suggestions

    policy                       OPA policy management
      ‚îî‚îÄ upload <files> [--repo <repo>]  Upload policy pack

Environment: TELEGRAM_BOT_TOKEN must be set
Examples: tgk chat-list
          tgk group-create "My Group" --forum --convert
          tgk channel-create "My Channel" mychannel --public
          tgk role-set -1001234567890 alchemist_core_bot --pin --manage-topics
          tgk topic-create -1001234567890 "New Topic" --message "Welcome!" --pin
          tgk topic-create -1001234567890 "ALC-RFC-2025-10-Naming"
          tgk topic-create -1001234567890 "ALC-RFC-2025-10-Naming" --dry-run
          tgk permission-set -1001234567890 send_messages on
          tgk template list
          tgk template show security
          tgk template use security --title "New Security Feature"
          tgk template publish 12345
          tgk stream create mobile-dark --type product --owner @pm-alex
          tgk stream metrics mobile-dark
          tgk stream archive mobile-dark --reason "Feature completed"
          tgk rfc new --template security --title "Add MFA" --draft
          tgk rfc submit --id 123
          tgk rfc withdraw --id 123
          tgk rfc diff --id 123
          tgk ai suggest template
          tgk ai suggest reviewers
          tgk policy upload policies/security/*.rego --repo alchemist/rfc-security-2025
EOF
            exit 1
            ;;
    esac
}

main "$@"
